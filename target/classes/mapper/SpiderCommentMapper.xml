<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.focus.data.comment.dao.SpiderCommentMapper" >
  <resultMap id="BaseResultMap" type="cn.focus.data.comment.model.SpiderComment" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 23 13:40:50 CST 2016.
    -->
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="pid" property="pid" jdbcType="INTEGER" />
    <result column="spider_pid" property="spiderPid" jdbcType="INTEGER" />
    <result column="price_rate" property="priceRate" jdbcType="TINYINT" />
    <result column="address_rate" property="addressRate" jdbcType="TINYINT" />
    <result column="transport_rate" property="transportRate" jdbcType="TINYINT" />
    <result column="facilities_rate" property="facilitiesRate" jdbcType="TINYINT" />
    <result column="env_rate" property="envRate" jdbcType="TINYINT" />
    <result column="comment" property="comment" jdbcType="VARCHAR" />
    <result column="comment_time" property="commentTime" jdbcType="TIMESTAMP" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="fake_user_id" property="fakeUserId" jdbcType="BIGINT" />
    <result column="audit_status" property="auditStatus" jdbcType="TINYINT" />
    <result column="audit_user" property="auditUser" jdbcType="VARCHAR" />
    <result column="audit_comment" property="auditComment" jdbcType="VARCHAR" />
    <result column="audit_time" property="auditTime" jdbcType="TIMESTAMP" />
    <result column="source" property="source" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 23 13:40:50 CST 2016.
    -->
    id, pid, spider_pid, price_rate, address_rate, transport_rate, facilities_rate, env_rate, 
    comment, comment_time, create_time, fake_user_id, audit_status, audit_user, audit_comment, audit_time, source
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 23 13:40:50 CST 2016.
    -->
    select 
    <include refid="Base_Column_List" />
    from spider_comment
    where id = #{id,jdbcType=INTEGER}
  </select>
  <insert id="insertSelective" parameterType="cn.focus.data.comment.model.SpiderComment" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 23 13:40:50 CST 2016.
    -->
    insert into spider_comment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="pid != null" >
        pid,
      </if>
      <if test="spiderPid != null" >
        spider_pid,
      </if>
      <if test="priceRate != null" >
        price_rate,
      </if>
      <if test="addressRate != null" >
        address_rate,
      </if>
      <if test="transportRate != null" >
        transport_rate,
      </if>
      <if test="facilitiesRate != null" >
        facilities_rate,
      </if>
      <if test="envRate != null" >
        env_rate,
      </if>
      <if test="comment != null" >
        comment,
      </if>
      <if test="commentTime != null" >
        comment_time,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="fakeUserId != null" >
        fake_user_id,
      </if>
      <if test="auditStatus != null" >
        audit_status,
      </if>
      <if test="auditUser != null" >
        audit_user,
      </if>
      <if test="auditComment != null" >
        audit_comment,
      </if>
      <if test="auditTime != null" >
        audit_time,
      </if>
      <if test="source != null" >
        source,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="pid != null" >
        #{pid,jdbcType=INTEGER},
      </if>
      <if test="spiderPid != null" >
        #{spiderPid,jdbcType=INTEGER},
      </if>
      <if test="priceRate != null" >
        #{priceRate,jdbcType=TINYINT},
      </if>
      <if test="addressRate != null" >
        #{addressRate,jdbcType=TINYINT},
      </if>
      <if test="transportRate != null" >
        #{transportRate,jdbcType=TINYINT},
      </if>
      <if test="facilitiesRate != null" >
        #{facilitiesRate,jdbcType=TINYINT},
      </if>
      <if test="envRate != null" >
        #{envRate,jdbcType=TINYINT},
      </if>
      <if test="comment != null" >
        #{comment,jdbcType=VARCHAR},
      </if>
      <if test="commentTime != null" >
        #{commentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="fakeUserId != null" >
        #{fakeUserId,jdbcType=BIGINT},
      </if>
      <if test="auditStatus != null" >
        #{auditStatus,jdbcType=TINYINT},
      </if>
      <if test="auditUser != null" >
        #{auditUser,jdbcType=VARCHAR},
      </if>
      <if test="auditComment != null" >
        #{auditComment,jdbcType=INTEGER},
      </if>
      <if test="auditTime != null" >
        #{auditTime,jdbcType=TIMESTAMP},
      </if>
      <if test="source != null" >
        #{source,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.focus.data.comment.model.SpiderComment" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 23 13:40:50 CST 2016.
    -->
    update spider_comment
    <set >
      <if test="pid != null" >
        pid = #{pid,jdbcType=INTEGER},
      </if>
      <if test="spiderPid != null" >
        spider_pid = #{spiderPid,jdbcType=INTEGER},
      </if>
      <if test="priceRate != null" >
        price_rate = #{priceRate,jdbcType=TINYINT},
      </if>
      <if test="addressRate != null" >
        address_rate = #{addressRate,jdbcType=TINYINT},
      </if>
      <if test="transportRate != null" >
        transport_rate = #{transportRate,jdbcType=TINYINT},
      </if>
      <if test="facilitiesRate != null" >
        facilities_rate = #{facilitiesRate,jdbcType=TINYINT},
      </if>
      <if test="envRate != null" >
        env_rate = #{envRate,jdbcType=TINYINT},
      </if>
      <if test="comment != null" >
        comment = #{comment,jdbcType=VARCHAR},
      </if>
      <if test="commentTime != null" >
        comment_time = #{commentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="fakeUserId != null" >
        fake_user_id = #{fakeUserId,jdbcType=BIGINT},
      </if>
      <if test="auditStatus != null" >
        audit_status = #{auditStatus,jdbcType=TINYINT},
      </if>
      <if test="auditUser != null" >
        audit_user = #{auditUser,jdbcType=VARCHAR},
      </if>
      <if test="auditTime != null" >
        audit_time = #{auditTime,jdbcType=TIMESTAMP},
      </if>
      <if test="auditTime != null" >
        source = #{source,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <insert id="insertMultiple" useGeneratedKeys="true" keyProperty="id" keyColumn="id" parameterType="java.util.List">
    insert into spider_comment (
    pid, spider_pid, price_rate, address_rate, transport_rate, facilities_rate, env_rate, comment,
    comment_time, fake_user_id, source
    ) values
    <foreach item="item" collection="list" separator=",">
    (#{item.pid}, #{item.spiderPid}, #{item.priceRate},#{item.addressRate},#{item.transportRate},#{item.facilitiesRate},
      #{item.envRate},#{item.comment},#{item.commentTime},#{item.fakeUserId},
      <if test="item.source == null">
        ""
      </if>
      <if test="item.source != null">
        #{item.source}
      </if>
      )
    </foreach>
  </insert>
  <update id="passList" parameterType="map">
    update spider_comment set audit_status = 1
    ,audit_user = #{auditUser}
    ,audit_comment = #{auditComment}
    ,audit_time = #{auditTime}
    where id in
    <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
      #{item}
    </foreach>
  </update>
  <update id="rejectList" parameterType="map">
    update spider_comment set audit_status = -1
    ,audit_user = #{auditUser}
    ,audit_comment = #{auditComment}
    ,audit_time = #{auditTime}
    where id in
    <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
      #{item}
    </foreach>
  </update>
  <update id="updateOneItem">
    update spider_comment set audit_status = #{auditStatus}
    ,audit_user = #{auditUser}
    ,audit_comment = #{auditComment}
    ,audit_time = #{auditTime}
    where id = #{id}
  </update>
  <select id="getSpiderProjectCommentList" resultType="map" parameterType="cn.focus.data.comment.model.vo.Query">
    select p.proj_name as projName, p.province_id as provinceId, p.city_id as cityId, s.id as id, s.pid as pid,
    s.price_rate as priceRate, s.address_rate as addressRate, s.transport_rate as transportRate, s.facilities_rate as facilitiesRate,
    s.env_rate as envRate, s.comment as comment, s.comment_time as commentTime, s.create_time as createTime,
    s.fake_user_id as fakeUserId, s.audit_status as auditStatus, s.audit_user as auditUser, s.audit_comment as auditComment,
    s.audit_time as auditTime, s.source as source
    from project p
    inner join spider_comment s on p.pid = s.pid
    <where>
      <if test="provinceId != null">
        p.province_id = #{provinceId}
      </if>
      <if test="cityId != null">
        and p.city_id = #{cityId}
      </if>
      <if test="projName != null">
        and p.proj_name like CONCAT('%', #{projName},'%')
      </if>
      <if test="auditStatus != null">
        and s.audit_status =#{auditStatus}
      </if>
      <if test="startTime != null">
        and s.create_time &gt;= #{startTime}
      </if>
      <if test="endTime != null">
        and s.create_time &lt;= #{endTime}
      </if>
      <if test="cityList != null">
        and p.city_id in
        <foreach collection="cityList" item="item" index="index" open="(" close=")" separator=",">
          #{item}
        </foreach>
      </if>
    </where>
    ORDER BY s.create_time DESC
    limit #{start},#{offset}
  </select>
  <select id="getSpiderCommentCount" resultType="int" parameterType="cn.focus.data.comment.model.vo.Query">
    select count(*) as count
    from project p
    inner join spider_comment s on p.pid = s.pid
    <where>
      <if test="provinceId != null">
        p.province_id = #{provinceId}
      </if>
      <if test="cityId != null">
        and p.city_id = #{cityId}
      </if>
      <if test="projName != null">
        and p.proj_name like CONCAT('%', #{projName},'%')
      </if>
      <if test="auditStatus != null">
        and s.audit_status =#{auditStatus}
      </if>
      <if test="startTime != null">
        and s.create_time &gt;= #{startTime}
      </if>
      <if test="endTime != null">
        and s.create_time &lt;= #{endTime}
      </if>
      <if test="cityList != null">
        and p.city_id in
        <foreach collection="cityList" item="item" index="index" open="(" close=")" separator=",">
          #{item}
        </foreach>
      </if>
    </where>
  </select>
  <select id="getCityInfoById" resultType="map">
     select s.id as id, p.proj_name as projName, p.province_id as provinceId, p.city_id as cityId from spider_comment s left join project p on s.pid = p.pid
     where s.id in
    <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
      #{item}
    </foreach>
  </select>
  <select id="getUnauditedCommentCount" resultType="int">
    select count(*) as count
    from project p
    inner join spider_comment s on p.pid = s.pid
    where s.audit_status = 0 and p.city_id = #{cityId}
  </select>
  <select id="getAllCommentCount" resultType="int">
    select count(*) as count
    from project p
    inner join spider_comment s on p.pid = s.pid
    <if test="cityId != null">
    where p.city_id = #{cityId}
    </if>
  </select>
  <select id="getAuditedCommentCountIND" resultType="int">
    select count(*) as count
    from project p
    inner join spider_comment s on p.pid = s.pid
    where p.city_id = #{cityId} and s.audit_time &gt;= #{startTime} and s.audit_time &lt;= #{endTime}
    and s.audit_status != 0
  </select>
  <select id="getNewCommentCount" resultType="int">
    select count(*) as count
    from project p
    inner join spider_comment s on p.pid = s.pid
    where p.city_id = #{cityId} and s.create_time &gt;= #{startTime} and s.create_time &lt;= #{endTime}
  </select>
  <select id="getSpiderCommentList" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from spider_comment
    <if test="auditStatus != null">
      where audit_status = #{auditStatus}
    </if>
    <if test="problem != null">
      and (price_rate = 0 or address_rate = 0 or transport_rate = 0 or facilities_rate = 0 or env_rate = 0)
    </if>
  </select>
</mapper>