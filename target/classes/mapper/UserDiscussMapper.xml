<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.focus.data.comment.dao.UserDiscussMapper" >
  <resultMap id="BaseResultMap" type="cn.focus.data.comment.model.UserDiscuss" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 23 13:40:50 CST 2016.
    -->
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="comment_id" property="commentId" jdbcType="INTEGER" />
    <result column="user_discuss" property="userDiscuss" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="personal_id" property="personalId" jdbcType="BIGINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="audit_status" property="auditStatus" jdbcType="TINYINT" />
    <result column="audit_user_id" property="auditUserId" jdbcType="VARCHAR" />
    <result column="audit_comment" property="auditComment" jdbcType="VARCHAR" />
    <result column="audit_time" property="auditTime" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="TINYINT" />
  </resultMap>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 23 13:40:50 CST 2016.
    -->
    id, comment_id, user_discuss, user_id, personal_id, create_time, audit_status, audit_user_id, audit_comment,
    audit_time, status
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 23 13:40:50 CST 2016.
    -->
    select 
    <include refid="Base_Column_List" />
    from user_discuss
    where id = #{id,jdbcType=INTEGER}
  </select>
  <insert id="insertSelective" parameterType="cn.focus.data.comment.model.UserDiscuss" useGeneratedKeys="true" keyProperty="id">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 23 13:40:50 CST 2016.
    -->
    insert into user_discuss
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="commentId != null" >
        comment_id,
      </if>
      <if test="userDiscuss != null" >
        user_discuss,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="personalId != null" >
        personal_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="auditStatus != null" >
        audit_status,
      </if>
      <if test="auditUserId != null" >
        audit_user_id,
      </if>
      <if test="auditComment!= null" >
        audit_comment,
      </if>
      <if test="auditTime != null" >
        audit_time,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="commentId != null" >
        #{commentId,jdbcType=INTEGER},
      </if>
      <if test="userDiscuss != null" >
        #{userDiscuss,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="personalId != null" >
        #{personalId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="auditStatus != null" >
        #{auditStatus,jdbcType=TINYINT},
      </if>
      <if test="auditUserId != null" >
        #{auditUserId,jdbcType=VARCHAR},
      </if>
      <if test="auditComment != null" >
        #{auditComment,jdbcType=INTEGER},
      </if>
      <if test="auditTime != null" >
        #{auditTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.focus.data.comment.model.UserDiscuss" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 23 13:40:50 CST 2016.
    -->
    update user_discuss
    <set >
      <if test="commentId != null" >
        comment_id = #{commentId,jdbcType=INTEGER},
      </if>
      <if test="userDiscuss != null" >
        user_discuss = #{userDiscuss,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="personalId != null" >
        personal_id = #{personalId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="auditStatus != null" >
        audit_status = #{auditStatus,jdbcType=TINYINT},
      </if>
      <if test="auditUserId != null" >
        audit_user_id = #{auditUserId,jdbcType=VARCHAR},
      </if>
      <if test="auditTime != null" >
        audit_time = #{auditTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateStatus" parameterType="map">
    update user_discuss set
    audit_status = 1
    ,status = #{status}
    ,audit_user_id = #{auditUserId}
    ,audit_comment = #{auditComment}
    ,audit_time = #{auditTime}
    where id in
    <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
      #{item}
    </foreach>
  </update>
  <select id="getAdminUserDiscussList" resultType="map" parameterType="cn.focus.data.comment.model.vo.Query">
    select p.proj_name as projName, p.province_id as provinceId, p.city_id as cityId, s.id as id, s.comment_id as commentId,
    s.user_discuss as userDiscuss,  s.create_time as createTime,
    s.user_id as userId, s.audit_status as auditStatus, s.audit_user_id as auditUserId, s.audit_comment as auditComment,
    s.audit_time as auditTime,  s.status as status
    from project p
    inner join project_comment t on p.pid = t.pid right join user_discuss s on t.id = s.comment_id
    <where>
      <if test="provinceId != null">
        p.province_id = #{provinceId}
      </if>
      <if test="cityId != null">
        and p.city_id = #{cityId}
      </if>
      <if test="pid != null">
        and p.pid = #{pid}
      </if>
      <if test="projName != null">
        and p.proj_name like CONCAT('%', #{projName},'%')
      </if>
      <if test="auditStatus != null">
        and s.audit_status =#{auditStatus}
      </if>
      <if test="status != null">
        and s.status =#{status}
      </if>
      <if test="startTime != null">
        and s.create_time &gt;= #{startTime}
      </if>
      <if test="endTime != null">
        and s.create_time &lt;= #{endTime}
      </if>
      <if test="cityList != null">
        and p.city_id in
        <foreach collection="cityList" item="item" index="index" open="(" close=")" separator=",">
          #{item}
        </foreach>
      </if>
    </where>
    ORDER BY s.create_time desc
    limit #{start},#{offset}
  </select>
  <select id="getAdminUserDiscussTotalCount" resultType="int" parameterType="cn.focus.data.comment.model.vo.Query">
    select count(*) as count
    from project p
    inner join project_comment t on p.pid = t.pid right join user_discuss s on t.id = s.comment_id
    <where>
      <if test="provinceId != null">
        p.province_id = #{provinceId}
      </if>
      <if test="cityId != null">
        and p.city_id = #{cityId}
      </if>
      <if test="pid != null">
        and p.pid = #{pid}
      </if>
      <if test="projName != null">
        and p.proj_name like CONCAT('%', #{projName},'%')
      </if>
      <if test="auditStatus != null">
        and s.audit_status =#{auditStatus}
      </if>
      <if test="status != null">
        and s.status =#{status}
      </if>
      <if test="startTime != null">
        and s.create_time &gt;= #{startTime}
      </if>
      <if test="endTime != null">
        and s.create_time &lt;= #{endTime}
      </if>
      <if test="cityList != null">
        and p.city_id in
        <foreach collection="cityList" item="item" index="index" open="(" close=")" separator=",">
          #{item}
        </foreach>
      </if>
    </where>
  </select>
  <select id="getCountByCommentId" resultType="int">
    select count(*) as count
    from user_discuss
    where comment_id = #{commentId}
  </select>
  <select id="getUserDiscussByCommentId" resultType="map">
    select id, comment_id as commentId, user_discuss as userDiscuss, user_id as userId, create_time as createTime
    from user_discuss
    where comment_id = #{commentId} and status = 1
    ORDER BY create_time DESC
    limit 2
  </select>
  <select id="getCityInfoById" resultType="map">
    select s.id as id, p.proj_name as projName, p.province_id as provinceId, p.city_id as cityId from user_discuss s left join project_comment c on c.id = s.comment_id left join project p on c.pid = p.pid
    where s.id in
    <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
      #{item}
    </foreach>
  </select>
  <select id="getUnauditedCommentCount" resultType="int">
    select count(*) as count
    from project p
    inner join project_comment t on p.pid = t.pid right join user_discuss s on t.id = s.comment_id
    where s.audit_status = 0 and p.city_id = #{cityId}
  </select>
  <select id="getAllCommentCount" resultType="int">
    select count(*) as count
    from project p
    inner join project_comment t on p.pid = t.pid right join user_discuss s on t.id = s.comment_id
    <if test="cityId != null">
    where p.city_id = #{cityId}
    </if>
  </select>
  <select id="getAuditedCommentCountIND" resultType="int">
    select count(*) as count
    from project p
    inner join project_comment t on p.pid = t.pid right join user_discuss s on t.id = s.comment_id
    where p.city_id = #{cityId} and s.audit_time &gt;= #{startTime} and s.audit_time &lt;= #{endTime}
    and s.audit_status = 1
  </select>
  <select id="getNewCommentCount" resultType="int">
    select count(*) as count
    from project p
    inner join project_comment t on p.pid = t.pid right join user_discuss s on t.id = s.comment_id
    where p.city_id = #{cityId} and s.create_time &gt;= #{startTime} and s.create_time &lt;= #{endTime}
  </select>
  <select id="getCityAndPid" resultType="map">
    select p.city_id as cityId, g.city_prefix as cityPrefix, t.pid as pid
    from project p
    inner join project_comment t on p.pid = t.pid right join user_discuss s on t.id = s.comment_id
    inner join geo_city g on g.city_id = p.city_id
    where s.id = #{commentId}
  </select>
  <select id="getPid" resultType="int">
    select p.pid from project_comment p, user_discuss u where u.comment_id = p.id and u.id = #{id}
  </select>
</mapper>