<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.focus.data.comment.dao.ProjectCommentMapper">
    <resultMap id="BaseResultMap" type="cn.focus.data.comment.model.ProjectComment">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Wed Nov 23 16:04:02 CST 2016.
        -->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="pid" jdbcType="INTEGER" property="pid"/>
        <result column="price_rate" jdbcType="TINYINT" property="priceRate"/>
        <result column="address_rate" jdbcType="TINYINT" property="addressRate"/>
        <result column="transport_rate" jdbcType="TINYINT" property="transportRate"/>
        <result column="facilities_rate" jdbcType="TINYINT" property="facilitiesRate"/>
        <result column="env_rate" jdbcType="TINYINT" property="envRate"/>
        <result column="proj_comment" jdbcType="VARCHAR" property="projComment"/>
        <result column="user_id" jdbcType="BIGINT" property="userId"/>
        <result column="personal_id" jdbcType="BIGINT" property="personalId"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="audit_status" jdbcType="TINYINT" property="auditStatus"/>
        <result column="audit_user_id" jdbcType="VARCHAR" property="auditUserId"/>
        <result column="audit_comment" jdbcType="VARCHAR" property="auditComment"/>
        <result column="audit_time" jdbcType="TIMESTAMP" property="auditTime"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="source" jdbcType="TINYINT" property="source"/>
        <result column="is_cream" jdbcType="TINYINT" property="isCream"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Wed Nov 23 16:04:02 CST 2016.
        -->
        id, pid, price_rate, address_rate, transport_rate, facilities_rate, env_rate, proj_comment,
        user_id, personal_id, create_time, audit_status, audit_user_id, audit_comment, audit_time, status, source,
        is_cream
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Wed Nov 23 16:04:02 CST 2016.
        -->
        select
        <include refid="Base_Column_List"/>
        from project_comment
        where id = #{id,jdbcType=INTEGER}
    </select>
    <insert id="insertSelective" parameterType="cn.focus.data.comment.model.ProjectComment" useGeneratedKeys="true"
            keyProperty="id">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Wed Nov 23 16:04:02 CST 2016.
        -->
        insert into project_comment
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="oId != null">
                o_id,
            </if>
            <if test="oldPraiseCount != null">
                old_praise_count,
            </if>
            <if test="pid != null">
                pid,
            </if>
            <if test="priceRate != null">
                price_rate,
            </if>
            <if test="addressRate != null">
                address_rate,
            </if>
            <if test="transportRate != null">
                transport_rate,
            </if>
            <if test="facilitiesRate != null">
                facilities_rate,
            </if>
            <if test="envRate != null">
                env_rate,
            </if>
            <if test="projComment != null">
                proj_comment,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="personalId != null">
                personal_id,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="auditStatus != null">
                audit_status,
            </if>
            <if test="auditUserId != null">
                audit_user_id,
            </if>
            <if test="auditComment != null">
                audit_comment,
            </if>
            <if test="auditTime != null">
                audit_time,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="source != null">
                source,
            </if>
            <if test="isCream != null">
                is_cream,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="oId != null">
                #{oId,jdbcType=INTEGER},
            </if>
            <if test="oldPraiseCount != null">
                #{oldPraiseCount,jdbcType=INTEGER},
            </if>
            <if test="pid != null">
                #{pid,jdbcType=INTEGER},
            </if>
            <if test="priceRate != null">
                #{priceRate,jdbcType=TINYINT},
            </if>
            <if test="addressRate != null">
                #{addressRate,jdbcType=TINYINT},
            </if>
            <if test="transportRate != null">
                #{transportRate,jdbcType=TINYINT},
            </if>
            <if test="facilitiesRate != null">
                #{facilitiesRate,jdbcType=TINYINT},
            </if>
            <if test="envRate != null">
                #{envRate,jdbcType=TINYINT},
            </if>
            <if test="projComment != null">
                #{projComment,jdbcType=VARCHAR},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=BIGINT},
            </if>
            <if test="personalId != null">
                #{personalId,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="auditStatus != null">
                #{auditStatus,jdbcType=TINYINT},
            </if>
            <if test="auditUserId != null">
                #{auditUserId,jdbcType=VARCHAR},
            </if>
            <if test="auditComment != null">
                #{auditComment,jdbcType=INTEGER},
            </if>
            <if test="auditTime != null">
                #{auditTime,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
            <if test="source != null">
                #{source,jdbcType=TINYINT},
            </if>
            <if test="isCream != null">
                #{isCream,jdbcType=TINYINT},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="cn.focus.data.comment.model.ProjectComment">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Wed Nov 23 16:04:02 CST 2016.
        -->
        update project_comment
        <set>
            <if test="pid != null">
                pid = #{pid,jdbcType=INTEGER},
            </if>
            <if test="oldPraiseCount != null">
                old_praise_count = #{oldPraiseCount,jdbcType=INTEGER},
            </if>
            <if test="priceRate != null">
                price_rate = #{priceRate,jdbcType=TINYINT},
            </if>
            <if test="addressRate != null">
                address_rate = #{addressRate,jdbcType=TINYINT},
            </if>
            <if test="transportRate != null">
                transport_rate = #{transportRate,jdbcType=TINYINT},
            </if>
            <if test="facilitiesRate != null">
                facilities_rate = #{facilitiesRate,jdbcType=TINYINT},
            </if>
            <if test="envRate != null">
                env_rate = #{envRate,jdbcType=TINYINT},
            </if>
            <if test="projComment != null">
                proj_comment = #{projComment,jdbcType=VARCHAR},
            </if>
            <if test="userId != null">
                user_id = #{userId,jdbcType=BIGINT},
            </if>
            <if test="personalId != null">
                personal_id = #{personalId,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="auditStatus != null">
                audit_status = #{auditStatus,jdbcType=TINYINT},
            </if>
            <if test="auditUserId != null">
                audit_user_id = #{auditUserId,jdbcType=VARCHAR},
            </if>
            <if test="auditComment != null">
                audit_comment = #{auditComment,jdbcType=VARCHAR},
            </if>
            <if test="auditTime != null">
                audit_time = #{auditTime,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="source != null">
                source = #{source,jdbcType=TINYINT},
            </if>
            <if test="isCream != null">
                is_cream = #{isCream,jdbcType=TINYINT},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <select id="getProjectCommentList" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from project_comment
        <where>
            <if test="pid != null">
                pid = #{pid}
            </if>
            <if test="auditStatus != null">
                and audit_status = #{auditStatus}
            </if>
        </where>
    </select>
    <resultMap type="cn.focus.data.comment.model.vo.Comments" id="AllCommentsMap">
        <id column="pid" jdbcType="INTEGER" property="id"/>
        <result column="ppid" jdbcType="INTEGER" property="pid"/>
        <result column="pprice_rate" jdbcType="TINYINT" property="priceRate"/>
        <result column="paddress_rate" jdbcType="TINYINT" property="addressRate"/>
        <result column="ptransport_rate" jdbcType="TINYINT" property="transportRate"/>
        <result column="pfacilities_rate" jdbcType="TINYINT" property="facilitiesRate"/>
        <result column="penv_rate" jdbcType="TINYINT" property="envRate"/>
        <result column="pproj_comment" jdbcType="VARCHAR" property="projComment"/>
        <result column="puser_id" jdbcType="BIGINT" property="userId"/>
        <result column="ppersonal_id" jdbcType="BIGINT" property="personalId"/>
        <result column="pcreate_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="paudit_status" jdbcType="TINYINT" property="auditStatus"/>
        <result column="paudit_user_id" jdbcType="VARCHAR" property="auditUserId"/>
        <result column="paudit_time" jdbcType="TIMESTAMP" property="auditTime"/>
        <result column="pstatus" jdbcType="TINYINT" property="status"/>
        <result column="psource" jdbcType="TINYINT" property="source"/>
        <result column="pis_cream" jdbcType="TINYINT" property="isCream"/>
        <collection property="userDiscussList" ofType="cn.focus.data.comment.model.UserDiscuss">
            <id column="uid" property="id" jdbcType="INTEGER"/>
            <result column="ucomment_id" property="commentId" jdbcType="INTEGER"/>
            <result column="uuser_discuss" property="userDiscuss" jdbcType="VARCHAR"/>
            <result column="uuser_id" property="userId" jdbcType="BIGINT"/>
            <result column="ucreate_time" property="createTime" jdbcType="TIMESTAMP"/>
            <result column="uaudit_status" property="auditStatus" jdbcType="TINYINT"/>
            <result column="uaudit_user_id" property="auditUserId" jdbcType="VARCHAR"/>
            <result column="uaudit_time" property="auditTime" jdbcType="TIMESTAMP"/>
            <result column="ustatus" property="status" jdbcType="TINYINT"/>
        </collection>
    </resultMap>
    <select id="getAllComments" resultMap="AllCommentsMap">
        SELECT p.id as pid, p.pid as ppid, p.price_rate as pprice_rate, p.address_rate as paddress_rate,
        p.transport_rate as ptransport_rate, p.facilities_rate as pfacilities_rate, p.env_rate as penv_rate,
        p.proj_comment as pproj_comment, p.user_id as puser_id, p.personal_id as ppersonal_id, p.create_time as pcreate_time,
        p.audit_status as paudit_status, p.audit_user_id as paudit_user_id, p.audit_time as paudit_time,
        p.status as pstatus,p.source as psource,p.is_cream as pis_cream,
        u.id as uid, u.comment_id as ucomment_id, u.user_discuss as uuser_discuss, u.user_id as uuser_id,
        u.create_time as ucreate_time, u.audit_status as uaudit_status, u.audit_user_id as uaudit_user_id,
        u.audit_time as uaudit_time, u.status as ustatus
        from
        (
        select * from
        project_comment
        WHERE  pid = #{pid} and status = 1
        <if test="isCream != null">
            and is_cream = #{isCream}
        </if>
        <if test="star != null">
            and (price_rate+address_rate+transport_rate+facilities_rate+env_rate)/5 &gt;= #{star}
            and (price_rate+address_rate+transport_rate+facilities_rate+env_rate)/5 &lt; #{star}+1
        </if>
        ORDER BY is_cream desc , create_time desc
        limit #{start},#{offset}
        ) p
        left join user_discuss u on p.id = u.comment_id
        and (u.status = 1 or isnull(u.status))
        ORDER BY p.is_cream desc , p.create_time desc, u.create_time desc
    </select>
    <select id="getCommentListCount" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from project_comment
        where pid = #{pid} and status = 1
        <if test="isCream != null">
            and is_cream = #{isCream}
        </if>
    </select>
    <select id="getComment" resultMap="AllCommentsMap">
        SELECT p.id as pid, p.pid as ppid, p.price_rate as pprice_rate, p.address_rate as paddress_rate,
        p.transport_rate as ptransport_rate, p.facilities_rate as pfacilities_rate, p.env_rate as penv_rate,
        p.proj_comment as pproj_comment, p.user_id as puser_id, p.personal_id as ppersonal_id, p.create_time as pcreate_time,
        p.audit_status as paudit_status, p.audit_user_id as paudit_user_id, p.audit_time as paudit_time,
        p.status as pstatus,p.source as psource,p.is_cream as pis_cream,
        u.id as uid, u.comment_id as ucomment_id, u.user_discuss as uuser_discuss, u.user_id as uuser_id,
        u.create_time as ucreate_time, u.audit_status as uaudit_status, u.audit_user_id as uaudit_user_id,
        u.audit_time as uaudit_time, u.status as ustatus
        from
        (
        select * from
        project_comment
        WHERE  id = #{id} and status = 1
        ) p
        left join user_discuss u on p.id = u.comment_id
        and (u.status = 1 or isnull(u.status))
        ORDER BY p.is_cream desc , p.create_time desc, u.create_time desc
    </select>
    <select id="getScoreByPid" resultType="cn.focus.data.comment.model.vo.Score">
    select pid, sum(price_rate) as sumPrice, sum(address_rate) as sumAddress, sum(transport_rate) as sumTransport,
    sum(facilities_rate) as sumFacilities, sum(env_rate) as sumEnv, count(*) as count from project_comment
    where status = 1 and pid = #{pid}
    </select>
    <select id="calAllProjectScore" resultType="cn.focus.data.comment.model.vo.Score">
        select pid ,sum(price_rate) as sumPrice, sum(address_rate) as sumAddress, sum(transport_rate) as sumTransport,
        sum(facilities_rate) as sumFacilities, sum(env_rate) as sumEnv, count(*) as count from project_comment
        where status = 1
        <if test="pid != null">
            and pid = #{pid}
        </if>
        group by pid
    </select>
    <update id="updateStatus" parameterType="map">
        update project_comment set
        audit_status = 1
        ,status = #{status}
        ,audit_user_id = #{auditUserId}
        ,audit_comment = #{auditComment}
        ,audit_time = #{auditTime}
        where id in
        <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </update>
    <update id="updateCream" parameterType="map">
        update project_comment set
        is_cream = #{isCream}
        where id in
        <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </update>
    <insert id="insertMultipleSpiders" parameterType="list">
        insert into project_comment (pid, price_rate, address_rate, transport_rate,
        facilities_rate, env_rate, proj_comment, user_id, create_time, audit_status,
        audit_user_id, audit_comment, audit_time, status, source, is_cream) VALUES
        <foreach item="item" collection="list" index="index" separator=",">
            (
            #{item.pid}, #{item.priceRate}, #{item.addressRate}, #{item.transportRate},
            #{item.facilitiesRate}, #{item.envRate}, #{item.projComment}, #{item.userId},
            #{item.createTime}, 1, #{item.auditUserId}, #{item.auditComment}, #{item.auditTime}, 1, 1,
            <if test="item.isCream == null">
                0
            </if>
            <if test="item.isCream != null">
                #{item.isCream}
            </if>
            )
        </foreach>
    </insert>
    <select id="getAdminProjectCommentList" resultType="map" parameterType="cn.focus.data.comment.model.vo.Query">
        select p.proj_name as projName, p.province_id as provinceId, p.city_id as cityId, s.id as id, s.pid as pid,
        s.price_rate as priceRate, s.address_rate as addressRate, s.transport_rate as transportRate, s.facilities_rate
        as facilitiesRate,
        s.env_rate as envRate, s.proj_comment as projComment, s.create_time as createTime,
        s.user_id as userId, s.audit_status as auditStatus, s.audit_user_id as auditUserId, s.audit_comment as
        auditComment,
        s.audit_time as auditTime, s.source as source, s.status as status, s.is_cream as isCream
        from project p
        inner join project_comment s on p.pid = s.pid
        <where>
            <if test="provinceId != null">
                p.province_id = #{provinceId}
            </if>
            <if test="cityId != null">
                and p.city_id = #{cityId}
            </if>
            <if test="projName != null">
                and p.proj_name like CONCAT('%', #{projName},'%')
            </if>
            <if test="pid != null">
                and p.pid = #{pid}
            </if>
            <if test="auditStatus != null">
                and s.audit_status =#{auditStatus}
            </if>
            <if test="status != null">
                and s.status =#{status}
            </if>
            <if test="startTime != null">
                and s.create_time &gt;= #{startTime}
            </if>
            <if test="endTime != null">
                and s.create_time &lt;= #{endTime}
            </if>
            <if test="source != null">
                and s.source = #{source}
            </if>
            <if test="cityList != null">
                and p.city_id in
                <foreach collection="cityList" item="item" index="index" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
        </where>
        ORDER BY s.create_time desc
        limit #{start},#{offset}
    </select>
    <select id="getAdminProjectCommentTotalCount" resultType="int" parameterType="cn.focus.data.comment.model.vo.Query">
        select count(*) as count
        from project p
        inner join project_comment s on p.pid = s.pid
        <where>
            <if test="provinceId != null">
                p.province_id = #{provinceId}
            </if>
            <if test="cityId != null">
                and p.city_id = #{cityId}
            </if>
            <if test="projName != null">
                and p.proj_name like CONCAT('%', #{projName},'%')
            </if>
            <if test="pid != null">
                and p.pid = #{pid}
            </if>
            <if test="auditStatus != null">
                and s.audit_status =#{auditStatus}
            </if>
            <if test="status != null">
                and s.status =#{status}
            </if>
            <if test="source != null">
                and s.source =#{source}
            </if>
            <if test="startTime != null">
                and s.create_time &gt;= #{startTime}
            </if>
            <if test="endTime != null">
                and s.create_time &lt;= #{endTime}
            </if>
            <if test="source != null">
                and s.source = #{source}
            </if>
            <if test="cityList != null">
                and p.city_id in
                <foreach collection="cityList" item="item" index="index" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
        </where>
    </select>
    <select id="getUserCommentsByUid" resultType="map">
        select p.proj_name as projName, s.id as id, s.pid as pid,
        s.price_rate as priceRate, s.address_rate as addressRate, s.transport_rate as transportRate, s.facilities_rate as facilitiesRate,
        s.env_rate as envRate, s.proj_comment as projComment,  s.create_time as createTime,
        s.user_id as userId, s.is_cream as isCream
        from project_comment s
        inner join  project p on p.pid = s.pid
        where s.user_id = #{userId} and s.status = 1
        ORDER BY s.create_time desc
        limit #{start},#{offset}
    </select>
    <select id="getUserCommentsCount" resultType="int">
        select count(*) as count
        from project_comment s
        inner join project p on p.pid = s.pid
        and s.user_id = #{userId} and s.status = 1
    </select>
    <resultMap type="cn.focus.data.comment.model.vo.UserComment" id="UserCommentsMap">
        <id column="pid" jdbcType="INTEGER" property="id"/>
        <result column="ppid" jdbcType="INTEGER" property="pid"/>
        <result column="proj_name" jdbcType="VARCHAR" property="projName"/>
        <result column="pprice_rate" jdbcType="TINYINT" property="priceRate"/>
        <result column="paddress_rate" jdbcType="TINYINT" property="addressRate"/>
        <result column="ptransport_rate" jdbcType="TINYINT" property="transportRate"/>
        <result column="pfacilities_rate" jdbcType="TINYINT" property="facilitiesRate"/>
        <result column="penv_rate" jdbcType="TINYINT" property="envRate"/>
        <result column="pproj_comment" jdbcType="VARCHAR" property="projComment"/>
        <result column="puser_id" jdbcType="BIGINT" property="userId"/>
        <result column="pcreate_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="pis_cream" jdbcType="TINYINT" property="isCream"/>
        <collection property="replyList" ofType="cn.focus.data.comment.model.UserDiscuss">
            <id column="uid" property="id" jdbcType="INTEGER"/>
            <result column="ucomment_id" property="commentId" jdbcType="INTEGER"/>
            <result column="uuser_discuss" property="userDiscuss" jdbcType="VARCHAR"/>
            <result column="uuser_id" property="userId" jdbcType="BIGINT"/>
            <result column="ucreate_time" property="createTime" jdbcType="TIMESTAMP"/>
            <result column="uaudit_status" property="auditStatus" jdbcType="TINYINT"/>
            <result column="uaudit_user_id" property="auditUserId" jdbcType="VARCHAR"/>
            <result column="uaudit_time" property="auditTime" jdbcType="TIMESTAMP"/>
            <result column="ustatus" property="status" jdbcType="TINYINT"/>
        </collection>
    </resultMap>
    <select id="getUserComments" resultMap="UserCommentsMap">
        SELECT p.id as pid, p.pid as ppid, p.proj_name as proj_name, p.price_rate as pprice_rate, p.address_rate as paddress_rate,
        p.transport_rate as ptransport_rate, p.facilities_rate as pfacilities_rate, p.env_rate as penv_rate,
        p.proj_comment as pproj_comment, p.user_id as puser_id, p.create_time as pcreate_time,p.is_cream as pis_cream,
        u.id as uid, u.comment_id as ucomment_id, u.user_discuss as uuser_discuss, u.user_id as uuser_id,
        u.create_time as ucreate_time, u.audit_status as uaudit_status, u.audit_user_id as uaudit_user_id,
        u.audit_time as uaudit_time, u.status as ustatus
        from
        (
        select pc.pid as pid, pc.id as id, pj.proj_name as proj_name, pc.price_rate as price_rate,
        pc.address_rate as address_rate, pc.transport_rate as transport_rate, pc.facilities_rate as facilities_rate,
        pc.env_rate as env_rate, pc.proj_comment as proj_comment, pc.user_id as user_id, pc.create_time as create_time,
        pc.is_cream as is_cream from
        project_comment pc
        inner join project pj on pc.pid = pj.pid
        and pc.user_id = #{userId} and pc.status = 1
        ORDER BY pc.create_time desc
        limit #{start},#{offset}
        ) p
        left join user_discuss u on p.id = u.comment_id
        and (u.status = 1 or isnull(u.status))
        ORDER BY p.create_time desc, u.create_time desc
    </select>
    <select id="getCityInfoById" resultType="map">
        select s.id as id, p.proj_name as projName, p.province_id as provinceId, p.city_id as cityId from
        project_comment s left join project p on s.pid = p.pid
        where s.id in
        <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>
    <select id="getByOid" resultType="cn.focus.data.comment.model.ProjectComment">
         select * from project_comment where o_id = #{oId} limit 1
    </select>
    <select id="getOldComments" resultMap="BaseResultMap">
        select * from project_comment where audit_comment = "老库数据自动通过";
    </select>
    <select id="getUnauditedCommentCount" resultType="int">
        select count(*) as count
        from project p
        inner join project_comment s on p.pid = s.pid
        where s.audit_status = 0 and p.city_id = #{cityId}
    </select>
    <select id="getAllCommentCount" resultType="int">
        select count(*) as count
        from project p
        inner join project_comment s on p.pid = s.pid
        <if test="cityId != null">
            where p.city_id = #{cityId}
        </if>
    </select>
    <select id="getAuditedCommentCountIND" resultType="int">
        select count(*) as count
        from project p
        inner join project_comment s on p.pid = s.pid
        where p.city_id = #{cityId} and s.audit_time &gt;= #{startTime} and s.audit_time &lt;= #{endTime}
        and s.source = 0
    </select>
    <select id="getNewCommentCount" resultType="int">
        select count(*) as count
        from project p
        inner join project_comment s on p.pid = s.pid
        where p.city_id = #{cityId} and s.create_time &gt;= #{startTime} and s.create_time &lt;= #{endTime}
        and s.source = 0
    </select>
    <select id="getCityAndPid" resultType="map">
        select p.city_id as cityId, g.city_prefix as cityPrefix, s.pid as pid
        from project p
        inner join project_comment s on p.pid = s.pid
        inner join geo_city g on g.city_id = p.city_id
        where s.id = #{commentId}
    </select>
    <select id="getOldPraiseCount" resultType="int">
        select old_praise_count from project_comment where id = #{id}
    </select>
    <update id="updateByOid">
        update project_comment set is_cream = #{isCream}, old_praise_count = #{oldPraiseCount} where o_id = #{oId}
    </update>
    <select id="getUserCommentCountInPid" resultType="int">
        select count(*) as count from project_comment where user_id = #{userId} and pid = #{pid}
    </select>
    <select id="getUnditShowComment" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from project_comment
        where audit_status = 0 and status = 1 and o_id = 0
    </select>
    <select id="getZeroComments" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from project_comment
        where status = 1
        and (price_rate = 0 or address_rate = 0 or transport_rate = 0 or facilities_rate = 0 or env_rate = 0)
    </select>
    <select id="getCommentsByTwoStatus" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from project_comment
        <where>
            <if test="auditStatus != null">
                audit_status = #{auditStatus}
            </if>
            <if test="status != null">
                and status = #{status}
            </if>
        </where>
    </select>
</mapper>